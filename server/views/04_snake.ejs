<%# <html> %>
<%- include('00a_header.ejs') %>
    <link rel = "stylesheet" href = "/css/04_snake.css">    

    <div class = "minisite-info">
      <div class = "container">
        <div class = "row">
          <div class = "minisite-info-text col-md-7 col-lg-8">
            <h1>Snake</h1>
            <p>The classic snake game on a 40 Ã— 22 board. Written in native JavaScript, graphics created with Canvas.</p>
            <p>Controls: <b>W, S, A, D</b> or <b>arrow keys</b> on desktop, on-screen buttons on mobile. Reloads page to restart game.</p>
            <div class = "d-flex">
              <button class = "btn btn-minisite-info">Details</button>
            </div>
          </div>
        </div>
      </div>
      <div class = "minisite-info-image d-none d-md-block"></div>
    </div>



    <div class = "code-details">
      <div class = "container">
        <div class = "row">
          <div class = "col">
            <h2>Structure of the game</h2>
            <p>The core of the game is the game loop. The main logic can be represented with the following flow chart. A keyboard event initiates a new cycle. The flow chart is slightly simplified for the sake of clarity.</p>            
            <p>The position of each object on the board (blocks of the snake body, apple) are defined as an array containing the coordinates of each block.</p>
            <img class = "img-fluid" src = "/images/minisite-info/snake-flowchart.jpg">
            <p>Changing the speed of the game is achieved by modifying the length of the cycle. This would also allow "cheating", when a player collects scores on low speed and finishes on high speed. Therefore the lowest speed level is recorded in the highscore.           
            <h3>Potential improvements</h3>
            <ul>
              <li>Restarting the game results in multiple instances of the game in simultaneous execution. It is avoided by forcing a page restart when a second game is initiated. This can be fixed by restructuring the code.</li>
              <li>Functions invoked in the game loop contain external if / else logic and invocations of further functions as side effects. It is not the best coding practice since just by looking at the game loop code does not fully reveal the logic of the game. This would also require the restructuring of the code.</li>
              <li>It can be further improved by advanced graphics with a rendering system, such as <a href = "https://pixijs.com/">PixiJS</a>.</li>
            </ul>

            <div class = "d-flex">
              <button class = "btn btn-minisite-info">Hide</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div></div>



    <div class = "content-block">
      <div class = "container">
        <div class = "row">      
            <div id = "game-controls">
              <div id = "speed-controls" class = "col-6">
                <button id = "btn-dec-speed" class = "btn btn-simple btn-sp">-</button>
                <div class = "game-controls-display bordered-box" id = "speed-display">0</div>
                <button id = "btn-inc-speed" class = "btn btn-simple btn-sp">+</button>
                <div class = "game-controls-label">Speed</div>
              </div>

              <div id = "score-controls" class = "float-end">
                <div class = "game-controls-label">Score</div>
                <div class = "game-controls-display bordered-box" id = "score">0</div>
                <button id = "btn-highscore" class = "btn btn-simple btn-hs" type = "button">Highscore</button>
                <button id = "btn-back" class = "btn btn-simple btn-hs d-none" type = "button">Back to the game</button>
              </div>
            </div>

            <div id = "snake-game" class = "d-flex justify-content-center">
              <canvas id = "snake-canvas" height = "440" width = "800"></canvas>
            </div>

            <div id = "start-btn-container">
              <button class = "btn btn-simple btn-block" id = "start-button">Start</button>
            </div>

            <div id = "mobile-controls">
              <div class = "grid-item"></div>
              <div class = "grid-item"><button id = "snake-up" class = "snake-mobile-button btn btn-simple d-flex"><span class="material-symbols-outlined align-self-center">arrow_upward</span></button></div>
              <div class = "grid-item"></div>
              <div class = "grid-item"><button id = "snake-left" class = "snake-mobile-button btn btn-simple d-flex"><span class="material-symbols-outlined">arrow_back</span></button></div>
              <div class = "grid-item"></div>
              <div class = "grid-item"><button id = "snake-right" class = "snake-mobile-button btn btn-simple d-flex"><span class="material-symbols-outlined">arrow_forward</span></button></div>
              <div class = "grid-item"></div>
              <div class = "grid-item"><button id = "snake-down" class = "snake-mobile-button btn btn-simple d-flex"><span class="material-symbols-outlined">arrow_downward</span></button></div>
              <div class = "grid-item"></div>
            </div>

            <div id = "highscore" class = "d-none">
              <table class = "table table-striped table-dark table-borderless">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Score</th>
                    <th>Speed</th>
                  </tr>
                </thead>
                <tbody>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>    

    <script src = "/js/04_snake.js"></script>
<%- include('00b_footer.ejs') %>
<%# </html> %>